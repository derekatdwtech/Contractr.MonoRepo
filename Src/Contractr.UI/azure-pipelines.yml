name: $(GitVersion.AssemblySemVer)

trigger:
  branches:
    include:
      - master
      - feature/*

  paths:
    include:
      - Src/Contractr.UI/**

variables:
  - name: artifactName
    value: 'Contractr.Ui'
  - name: nodeVersion
    value: '22.x'
  - name: serviceConnection
    value: DWTECH
  - name: workingdir
    value: '$(Build.SourcesDirectory)/Src/Contractr.UI'
  - group: CTRDEV
  

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Build
    jobs:
      - job: Build
        displayName: Build
        steps:
        - checkout: self
          persistCredentials: true
          fetchDepth: 0

        - task: gitversion/setup@0
          displayName: Install GitVersion
          inputs:
            versionSpec: '5.x'

        - task: gitversion/execute@0
          displayName: Determine Version Number
          inputs:
            configFilePath: $(workingdir)/GitVersion.yml

        - task: NodeTool@0
          displayName: 'Install Node.js'
          inputs:
            versionSpec: '$(nodeVersion)'
          
        - script: |
            cd $(workingdir)
            npm ci
          displayName: 'NPM Install'
        
        - script: |
            cd $(workingdir)
            npm run test:ci
          displayName: Run Unit Tests
          continueOnError: true

        - script: |
            cd $(workingdir)
            npm run build
          displayName: Build React App
          
        - task: CopyFiles@2
          displayName: Copy files to artifact directory
          inputs:
            sourceFolder: '$(workingdir)/build' 
            Contents: '**/*'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'
            cleanTargetFolder: true

        - task: ArchiveFiles@2
          displayName: Zip Package
          inputs:
            rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
            includeRootFolder: false
            archiveType: zip
            archiveFile: $(Build.ArtifactStagingDirectory)/$(artifactName).zip
            replaceExistingArchive: true
        
        - task: PublishPipelineArtifact@0
          displayName: Publish Pipeline Artifact
          condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')) 
          inputs:
            artifactName: '$(artifactName).zip'
            targetPath: '$(Build.ArtifactStagingDirectory)'
          
          
        - task: Bash@3
          displayName: 'Create Git Tag'
          condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
          inputs:
            targetType: 'inline'
            script: |
              git config --global user.email "azure-pipeline@example.com"
              git config --global user.name "Azure Pipeline"
              git tag -a "v$(GitVersion.AssemblySemVer)" -m "[skip ci] Release v$(GitVersion.AssemblySemVer)"
              git push origin "v$(GitVersion.AssemblySemVer)"

  - stage: Deploy_Dev
    displayName: Deploy to Dev
    jobs:
      - job: Dev
        steps:
          - checkout: self
            persistCredentials: true
            fetchDepth: 0

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: '$(artifactName).zip'
              targetPath: $(Build.SourcesDirectory)/bin

          - task: Bash@3
            displayName: 'Configure Environment Variables'
            inputs:
              targetType: 'inline'
              script: |
                cd $(Build.SourcesDirectory)/bin
                echo "Current directory: $(pwd)"
                echo "Contents of current directory:"
                ls -la
                echo "Unzipping $(artifactName).zip"
                unzip -o $(artifactName).zip
                echo "Contents after unzip:"
                ls -la
                echo "*********************************************************************************************************"
                echo "Source directory contents:"
                ls -la $(Build.SourcesDirectory)/Src/Contractr.UI/
                echo "Copying env-config.deploy.js to env-config.js"
                cp $(Build.SourcesDirectory)/Src/Contractr.UI/env-config.deploy.js env-config.js
                echo "Contents after copy:"
                ls -la
                echo "*********************************************************************************************************"
                echo "Updating env-config.js"
                sed -i 's|#{API_URL}#|$(CTR_API_URL)|g' env-config.js
                sed -i 's|#{NOTIFICATION_API_URL}#|$(CTR_NOTIFICATION_API_URL)|g' env-config.js
                sed -i 's|#{AUTH0_CLIENT_ID}#|$(CTR_AUTH0_CLIENT_ID)|g' env-config.js
                sed -i 's|#{AUTH0_DOMAIN}#|$(CTR_AUTH0_DOMAIN)|g' env-config.js
                sed -i 's|#{AUTH0_AUDIENCE}#|$(CTR_AUTH0_AUDIENCE)|g' env-config.js
                echo "Contents before zip:"
                ls -la
                zip -r ../$(artifactName)-deploy.zip .
                cd ..
                echo "Final zip contents:"
                unzip -l $(artifactName)-deploy.zip

          - task: AzureWebApp@1
            displayName: Publish To App Service
            inputs:
              azureSubscription: $(serviceConnection)
              appType: 'webApp'
              appName: ctr-as-ctrui-use2-dev
              package: '$(Build.SourcesDirectory)/bin/$(artifactName)-deploy.zip'
        